<div class="window" style="padding-top: 1.5rem;">
  <div class="window-content">
    <div class="pane-group">
	  	<div class="pane" style="padding:6rem;padding-top: 0 ">
			<h3><u><span class="icon icon icon-vcard icon-text" style="color:#4e5851;padding-right:1rem "></span>Summary</u></h3>
	  		<table class="mt-2 table-striped">
	  			<thead>
	  				<th>#</th>
	  				<th>Number</th>
	  			</thead>
	  			<tbody>
	  				<tr>
	  					<th><strong>Desktops</strong></th>
	  					<td id='_desktops'></td>
	  				</tr>
					<tr>
	  					<th><strong>Laptops</strong></th>
	  					<td id='_laptops'></td>
	  				</tr>
	  				<tr>
	  					<th><strong>Servers</strong></th>
	  					<td id='_servers'></td>
	  				</tr>
	  				<tr>
	  					<th><strong>Printers</strong></th>
	  					<td id='_printers'></td>
	  				</tr>
	  				<tr>
	  					<th><strong>Routers</strong></th>
	  					<td id='_routers'></td>
	  				</tr>
	  				<tr>
	  					<th><strong>Access Points</strong></th>
	  					<td id='_accesspoints'></td>
	  				</tr>
	  				<tr>
	  					<th><strong>Extras</strong></th>
	  					<td id='_extras'></td>
	  				</tr>
	  				<tr>
	  					<th style="background-color:#ebebe3" colspan="2" class="text-center" ><strong>Cameras</strong></th>
	  				</tr>
	  				<tr>
	  					<th><strong>DVR's</strong></th>
	  					<th id="_dvrs"></th>
	  				</tr>

	  				<tr>
	  					<th><strong>Cameras</strong></th>
	  					<th id="_cameras"></th>
	  				</tr>

	  			</tbody>
	  		</table>

	  	</div>
	  	<div class="pane" style="padding:3rem;padding-top: 0;">
	  		<div id="piechart" style="margin-top: 2rem;"></div>

	  	</div>
	  </div>
	</div>
</div>

<script type="text/javascript">
	const { init_data} = require('../res/reusable');
 	var db = init_data(Dexie);
 	let _desktops=0;
 	let _laptops=0;
 	let _servers=0;
 	let _dvrs=0;
 	let _printers=0;
 	let _routers=0;
 	let _accesspoints=0;
 	let _extras=0;
 	let _cameras=0;
 	db.transaction('rw',db.desktops,db.laptops,db.servers,db.dvrs,db.printers,db.routers,db.accesspoints,db.extras,db.cam_ext1,db.cam_ext2,db.cam_ext3,db.cam_ext4,db.cam_ext5,db.cam_ext6,db.cam_ext7,db.cam_ext8,db.cam_ext9,db.cam_ext10,db.cam_ext11,db.cam_ext12,db.cam_ext13,db.cam_ext14,db.cam_ext15, function () {
 		//count desktops
 		db.desktops.count()
 		.then((value)=>{
 			_desktops+=value;
 		});
 		//count printers in desktop
 		db.desktops.where('printer_model').notEqual('').count()
 		.then((value)=>{
 			_printers+=value;
 		});
 		//count laptops
 		db.laptops.count()
 		.then((value)=>{
 			_laptops+=value;
 		});

 		//count printers in laptops
 		db.laptops.where('printer_model').notEqual('').count()
 		.then((value)=>{
 			_printers+=value;
 		});

 		//count servers
 		db.servers.count()
 		.then((value)=>{
 			_servers+=value;
 		});


 		//count dvrs
 		db.dvrs.count()
 		.then((value)=>{
 			_dvrs+=value;
 		});

 		//count printers
 		db.printers.count()
 		.then((value)=>{
 			_printers+=value;
 		});

 		//count routers
 		db.routers.count()
 		.then((value)=>{
 			_routers+=value;
 		});

 		//count accesspoints
 		db.accesspoints.count()
 		.then((value)=>{
 			_accesspoints+=value;
 		});
 		//count extras
 		db.extras.count()
 		.then((value)=>{
 			_extras+=value;
 		});
 		//Count total number of cameras
 		db.cam_ext1.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext2.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext3.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext4.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext5.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext6.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext7.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext8.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext9.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext10.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext11.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext12.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext13.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext14.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		db.cam_ext15.where('number').notEqual('').each(cam=>{
 			_cameras+=parseInt(cam.number);
 		});
 		


 	}).then(()=>{
document.querySelector('#_desktops').innerHTML=_desktops;
document.querySelector('#_laptops').innerHTML=_laptops;
document.querySelector('#_servers').innerHTML=_servers;
document.querySelector('#_printers').innerHTML=_printers;
document.querySelector('#_routers').innerHTML=_routers;
document.querySelector('#_accesspoints').innerHTML=_accesspoints;
document.querySelector('#_extras').innerHTML=_extras;
document.querySelector('#_dvrs').innerHTML=_dvrs;
document.querySelector('#_cameras').innerHTML=_cameras;
	// Load google charts
				 google.charts.load('current', {'packages':['corechart']});
				 google.charts.setOnLoadCallback(drawChart);

				// Draw the chart and set the chart values
				function drawChart() {
				  var data = google.visualization.arrayToDataTable([
				  ['Task', 'List all devices'],
				  ['Desktops', _desktops],
				  ['Laptops', _laptops],
				  ['Servers', _servers],
				  ['Printers', _printers],
				  ['Routers', _routers],
				  ['Access Points', _accesspoints],
				  ['Extras', _extras],
				  ["DVR's", _dvrs]
				]);

				  // Optional; add a title and set the width and height of the chart
				  var options = {'title':'Devices', 'width':700, 'height':500};

				  // Display the chart inside the <div> element with id="piechart"
				  var chart = new google.visualization.PieChart(document.getElementById('piechart'));
				  chart.draw(data, options);
				}

 	});

</script>